// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: snippets.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createSnippet = `-- name: CreateSnippet :one
INSERT INTO snippets (
    id, 
    title, 
    code, 
    language, 
    tags, 
    created_at, 
    updated_at, 
    user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, title, code, language, tags, created_at, updated_at, user_id
`

type CreateSnippetParams struct {
	ID        uuid.UUID
	Title     string
	Code      string
	Language  string
	Tags      []string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
}

func (q *Queries) CreateSnippet(ctx context.Context, arg CreateSnippetParams) (Snippet, error) {
	row := q.db.QueryRowContext(ctx, createSnippet,
		arg.ID,
		arg.Title,
		arg.Code,
		arg.Language,
		pq.Array(arg.Tags),
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
	)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Code,
		&i.Language,
		pq.Array(&i.Tags),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteSnippet = `-- name: DeleteSnippet :exec
DELETE from snippets
WHERE user_id = $1
AND id = $2
`

type DeleteSnippetParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
}

func (q *Queries) DeleteSnippet(ctx context.Context, arg DeleteSnippetParams) error {
	_, err := q.db.ExecContext(ctx, deleteSnippet, arg.UserID, arg.ID)
	return err
}

const filterSnippets = `-- name: FilterSnippets :many
SELECT id, title, code, language, tags, created_at, updated_at, user_id FROM snippets
WHERE user_id = $1
  AND ($2 = '' OR title ILIKE '%' || $2 || '%' OR code ILIKE '%' || $2 || '%')
  AND (cardinality($3::text[]) = 0 OR tags && $3::text[])
  AND ($4 = '' OR language = $4)
ORDER BY created_at DESC
LIMIT $5
OFFSET $6
`

type FilterSnippetsParams struct {
	UserID  uuid.UUID
	Column2 interface{}
	Column3 []string
	Column4 interface{}
	Limit   int32
	Offset  int32
}

func (q *Queries) FilterSnippets(ctx context.Context, arg FilterSnippetsParams) ([]Snippet, error) {
	rows, err := q.db.QueryContext(ctx, filterSnippets,
		arg.UserID,
		arg.Column2,
		pq.Array(arg.Column3),
		arg.Column4,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Snippet
	for rows.Next() {
		var i Snippet
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Code,
			&i.Language,
			pq.Array(&i.Tags),
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnippetsOfUser = `-- name: GetSnippetsOfUser :many
SELECT id, title, code, language, tags, created_at, updated_at, user_id from snippets
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetSnippetsOfUserParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetSnippetsOfUser(ctx context.Context, arg GetSnippetsOfUserParams) ([]Snippet, error) {
	rows, err := q.db.QueryContext(ctx, getSnippetsOfUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Snippet
	for rows.Next() {
		var i Snippet
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Code,
			&i.Language,
			pq.Array(&i.Tags),
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpecificSnippet = `-- name: GetSpecificSnippet :one
SELECT id, title, code, language, tags, created_at, updated_at, user_id from snippets
WHERE user_id = $1
AND id = $2
`

type GetSpecificSnippetParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
}

func (q *Queries) GetSpecificSnippet(ctx context.Context, arg GetSpecificSnippetParams) (Snippet, error) {
	row := q.db.QueryRowContext(ctx, getSpecificSnippet, arg.UserID, arg.ID)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Code,
		&i.Language,
		pq.Array(&i.Tags),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const updateSnippet = `-- name: UpdateSnippet :one
UPDATE snippets
SET title = $1,
code = $2,
language = $3,
tags = $4,
updated_at = NOW()
WHERE user_id = $5
AND id = $6 
RETURNING id, title, code, language, tags, created_at, updated_at, user_id
`

type UpdateSnippetParams struct {
	Title    string
	Code     string
	Language string
	Tags     []string
	UserID   uuid.UUID
	ID       uuid.UUID
}

func (q *Queries) UpdateSnippet(ctx context.Context, arg UpdateSnippetParams) (Snippet, error) {
	row := q.db.QueryRowContext(ctx, updateSnippet,
		arg.Title,
		arg.Code,
		arg.Language,
		pq.Array(arg.Tags),
		arg.UserID,
		arg.ID,
	)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Code,
		&i.Language,
		pq.Array(&i.Tags),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
