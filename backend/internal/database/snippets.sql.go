// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: snippets.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createSnippet = `-- name: CreateSnippet :one
INSERT INTO snippets (
    id, 
    title, 
    code, 
    language, 
    tags, 
    created_at, 
    updated_at, 
    user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, title, code, language, tags, created_at, updated_at, user_id
`

type CreateSnippetParams struct {
	ID        uuid.UUID
	Title     string
	Code      string
	Language  string
	Tags      []string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
}

func (q *Queries) CreateSnippet(ctx context.Context, arg CreateSnippetParams) (Snippet, error) {
	row := q.db.QueryRowContext(ctx, createSnippet,
		arg.ID,
		arg.Title,
		arg.Code,
		arg.Language,
		pq.Array(arg.Tags),
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
	)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Code,
		&i.Language,
		pq.Array(&i.Tags),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getSnippetsForUser = `-- name: GetSnippetsForUser :many
SELECT snippets.id, snippets.title, snippets.code, snippets.language, snippets.tags, snippets.created_at, snippets.updated_at, snippets.user_id from snippets
WHERE snippets.user_id = $1
ORDER BY snippets.created_at DESC
`

func (q *Queries) GetSnippetsForUser(ctx context.Context, userID uuid.UUID) ([]Snippet, error) {
	rows, err := q.db.QueryContext(ctx, getSnippetsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Snippet
	for rows.Next() {
		var i Snippet
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Code,
			&i.Language,
			pq.Array(&i.Tags),
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
